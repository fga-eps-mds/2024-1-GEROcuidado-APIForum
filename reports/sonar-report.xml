<testExecutions version="1">
<file path="src\publicacao\publicacao.service.spec.ts">
<testCase name="PublicacaoService should be defined" duration="12" />
<testCase name="PublicacaoService should create Publicacao" duration="5" />
<testCase name="PublicacaoService should find Publicacao" duration="20" />
<testCase name="PublicacaoService should remove Publicacao" duration="3" />
<testCase name="PublicacaoService should update Publicacao" duration="3" />
<testCase name="PublicacaoService findAll should findAll Publicacao" duration="6" />
<testCase name="PublicacaoService findAll should findAll Publicacao with isReported" duration="4" />
<testCase name="PublicacaoService findAll should findAll Publicacao with title unaccent" duration="3" />
</file>
<file path="src\publicacao\comentario.service.spec.ts">
<testCase name="ComentariosService deve estar definido" duration="5" />
<testCase name="ComentariosService create deve criar um coment&#xe1;rio com sucesso" duration="3" />
<testCase name="ComentariosService findAll deve retornar uma lista paginada de coment&#xe1;rios" duration="3" />
<testCase name="ComentariosService findOne deve retornar um coment&#xe1;rio com informa&#xe7;&#xf5;es do usu&#xe1;rio" duration="4" />
<testCase name="ComentariosService findOne deve lan&#xe7;ar uma exce&#xe7;&#xe3;o NotFoundException se o coment&#xe1;rio n&#xe3;o for encontrado" duration="13" />
<testCase name="ComentariosService update deve atualizar um coment&#xe1;rio com sucesso" duration="17" />
<testCase name="ComentariosService remove deve remover um coment&#xe1;rio com sucesso" duration="4" />
</file>
<file path="src\publicacao\publicacao.controller.spec.ts">
<testCase name="PublicacaoController should be defined" duration="6" />
<testCase name="PublicacaoController should create Publicacao" duration="5" />
<testCase name="PublicacaoController should find Publicacao" duration="3" />
<testCase name="PublicacaoController should remove Publicacao" duration="3" />
<testCase name="PublicacaoController should update Publicacao" duration="3" />
<testCase name="PublicacaoController findAll should findAll Publicacao" duration="3" />
</file>
<file path="src\shared\helpers\sql-query-helper.spec.ts">
<testCase name="Where Clause EQUAL should return empty string if value is undefined" duration="1" />
<testCase name="Where Clause EQUAL should return where string based on given value and tableColumn" duration="1" />
<testCase name="Where Clause STRING should return empty string if value is undefined" duration="1" />
<testCase name="Where Clause STRING should return empty string if value has no length" duration="1" />
<testCase name="Where Clause STRING should return where string based on given value and tableColumn" duration="0" />
<testCase name="Where Clause NUMBER should return empty string if value is undefined" duration="0" />
<testCase name="Where Clause NUMBER should return where string based on given value and tableColumn" duration="0" />
<testCase name="Where Clause BOOLEAN should return empty string if value is undefined" duration="1" />
<testCase name="Where Clause BOOLEAN should return empty string if value is higher than 1" duration="1" />
<testCase name="Where Clause BOOLEAN should return where string based on given value and tableColumn" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return empty string if value is undefined" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return where string if value is number" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return where string if value is number array" duration="0" />
</file>
<file path="src\config\db\db.service.spec.ts">
<testCase name="DbService should be defined" duration="4" />
<testCase name="DbService should return db config development" duration="4" />
<testCase name="DbService should return db config production" duration="4" />
</file>
<file path="src\autenticacao.guard.spec.ts">
<testCase name="AutenticacaoGuard should be defined" duration="4" />
<testCase name="AutenticacaoGuard should pass if route is public" duration="3" />
<testCase name="AutenticacaoGuard should pass if authentication is successful" duration="6" />
<testCase name="AutenticacaoGuard should not pass if authentication is unsuccessful" duration="5" />
</file>
<file path="src\shared\decorators\paginate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="3" />
<testCase name="Pagination should be Paginate not limit" duration="0" />
<testCase name="Pagination should be Paginate not offset" duration="1" />
</file>
<file path="src\shared\interceptors\data-transform.interceptor.spec.ts">
<testCase name="DataTransformInterceptor should be defined" duration="1" />
<testCase name="DataTransformInterceptor should be intercept t1" duration="2" />
<testCase name="DataTransformInterceptor should be intercept should formatData with message" duration="1" />
<testCase name="DataTransformInterceptor should be intercept should formatData with no message" duration="1" />
<testCase name="DataTransformInterceptor should be intercept should formatData with Paginate" duration="1" />
</file>
<file path="src\shared\helpers\buffer-to-image.spec.ts">
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a image" duration="2" />
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a empty if null" duration="1" />
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a empty if not image" duration="1" />
<testCase name="Buffer to image isBase64 should be false" duration="1" />
<testCase name="Buffer to image isBase64 should be true" duration="0" />
<testCase name="Buffer to image isBase64Image should be false" duration="0" />
<testCase name="Buffer to image isBase64Image should be true" duration="0" />
</file>
<file path="src\shared\filters\all-exceptions.filter.spec.ts">
<testCase name="AllExceptionsFilter should be defined" duration="1" />
<testCase name="AllExceptionsFilter should be catch" duration="1" />
<testCase name="AllExceptionsFilter should be not exception to class-validator" duration="0" />
<testCase name="AllExceptionsFilter should be not exception only message" duration="0" />
</file>
<file path="src\shared\classes\http-response.spec.ts">
<testCase name="HttpResponse should be defined" duration="1" />
<testCase name="HttpResponse should create message with payload text" duration="1" />
<testCase name="HttpResponse should create message with success text" duration="0" />
<testCase name="HttpResponse should create message with updated text" duration="0" />
<testCase name="HttpResponse should create message with deleted text" duration="0" />
</file>
<file path="src\shared\decorators\ordenate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="0" />
<testCase name="Pagination should be Paginate not limit" duration="0" />
<testCase name="Pagination should be Paginate not offset" duration="0" />
<testCase name="Ordenate should return default object if there is no JSON" duration="0" />
<testCase name="Ordenate should return OrderParams object with values for order" duration="0" />
<testCase name="Ordenate should return default values when obj has empty props" duration="1" />
<testCase name="Ordenate should be Ordenate using factory" duration="1" />
</file>
<file path="src\shared\decorators\filtrate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="1" />
<testCase name="Pagination should be Paginate not limit" duration="1" />
<testCase name="Pagination should be Paginate not offset" duration="0" />
<testCase name="Filtrate should return empty object for filter" duration="2" />
<testCase name="Filtrate should return TestFilterProps object with values for filter" duration="0" />
<testCase name="Filtrate should be Filtrate using factory" duration="0" />
</file>
<file path="src\shared\helpers\commons.spec.ts">
<testCase name="Helper deve criar um hash com tamanho default" duration="1" />
<testCase name="Helper should be return if its nill for undefined" duration="1" />
<testCase name="Helper should be return if its nill for null" duration="1" />
<testCase name="Helper should be isJsonObject to be true" duration="1" />
<testCase name="Helper should be isJsonObject to be false" duration="1" />
<testCase name="Helper should be isJsonObject to be false in not parse" duration="0" />
</file>
<file path="src\shared\decorators\filtrate-string.spec.ts">
<testCase name="Pagination should be defined" duration="2" />
<testCase name="Pagination should be Paginate" duration="1" />
<testCase name="Pagination should be Paginate not limit" duration="1" />
<testCase name="Pagination should be Paginate not offset" duration="0" />
<testCase name="FiltrateString should return empty object for filter" duration="1" />
<testCase name="FiltrateString should return TestFilterProps object with values for filter" duration="1" />
<testCase name="FiltrateString should be FiltrateString using factory" duration="2" />
</file>
<file path="src\shared\filters\model-not-found.exception-filter.spec.ts">
<testCase name="ModelNotFoundExceptionFilter should be defined" duration="1" />
<testCase name="ModelNotFoundExceptionFilter should be catch" duration="1" />
</file>
<file path="src\shared\helpers\string-helpers.spec.ts">
<testCase name="String Helpers should be regex" duration="1" />
</file>
<file path="src\shared\decorators\public-route.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
</file>
<file path="src\shared\validators\id.validator.spec.ts">
<testCase name="HttpResponse should be defined" duration="1" />
</file>
</testExecutions>