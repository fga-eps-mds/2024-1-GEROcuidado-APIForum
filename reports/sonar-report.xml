<testExecutions version="1">
<file path="src\publicacao\denuncia.service.spec.ts">
<testCase name="DenunciaService deve estar definido" duration="33" />
<testCase name="DenunciaService create deve criar uma den&#xfa;ncia com sucesso" duration="15">
<failure message="Error"><![CDATA[Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

- Expected
+ Received

  Object {
-   &quot;dataHora&quot;: 2025-02-16T01:39:21.976Z,
+   &quot;dataHora&quot;: &quot;2025-02-16T01:39:21.976Z&quot;,
    &quot;descricao&quot;: &quot;Descri&#xe7;&#xe3;o da den&#xfa;ncia&quot;,
    &quot;idUsuario&quot;: 1,
    &quot;motivo&quot;: &quot;Conte&#xfa;do inadequado&quot;,
    &quot;publicacaoId&quot;: 1,
  },

Number of calls: 1
    at Object.&lt;anonymous&gt; (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\src\publicacao\denuncia.service.spec.ts:100:33)]]></failure>
</testCase>
<testCase name="DenunciaService create deve lan&#xe7;ar uma exce&#xe7;&#xe3;o se a publica&#xe7;&#xe3;o n&#xe3;o for encontrada" duration="40">
<failure message="Error"><![CDATA[Error: expect(received).rejects.toThrowError(expected)

Expected constructor: NotFoundException
Received constructor: Error

Received message: &quot;Publica&#xe7;&#xe3;o n&#xe3;o encontrada!&quot;

      30 |
      31 |     if (!publicacao) {
    &gt; 32 |       throw new Error(&apos;Publica&#xe7;&#xe3;o n&#xe3;o encontrada!&apos;);
         |             ^
      33 |     }
      34 |
      35 |     const denuncia = this._repository.create({

      at DenunciaService.create (src/publicacao/denuncia.service.ts:32:13)
      at Object.&lt;anonymous&gt; (src/publicacao/denuncia.service.spec.ts:119:7)
    at Object.toThrowError (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\expect\build\index.js:218:22)
    at Object.&lt;anonymous&gt; (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\src\publicacao\denuncia.service.spec.ts:119:63)
    at Promise.then.completed (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:316:40)
    at _runTest (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:121:9)
    at _runTestsForDescribeBlock (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\node_modules\jest-runner\build\runTest.js:444:34)]]></failure>
</testCase>
<testCase name="DenunciaService create deve lan&#xe7;ar uma exce&#xe7;&#xe3;o se ocorrer um erro ao salvar a den&#xfa;ncia" duration="9" />
<testCase name="DenunciaService findAll deve retornar uma lista paginada de den&#xfa;ncias" duration="18" />
<testCase name="DenunciaService findOne deve retornar uma den&#xfa;ncia pelo ID" duration="8" />
<testCase name="DenunciaService findOne deve lan&#xe7;ar uma exce&#xe7;&#xe3;o se a den&#xfa;ncia n&#xe3;o for encontrada" duration="8" />
<testCase name="DenunciaService update deve atualizar uma den&#xfa;ncia com sucesso" duration="10">
<failure message="Error"><![CDATA[Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: {&quot;dataHora&quot;: &quot;2025-02-16T01:39:22.102Z&quot;, &quot;descricao&quot;: &quot;Descri&#xe7;&#xe3;o da den&#xfa;ncia&quot;, &quot;id&quot;: 1, &quot;idUsuario&quot;: 1, &quot;motivo&quot;: &quot;Conte&#xfa;do ofensivo&quot;}, {&quot;dataHora&quot;: &quot;2025-02-16T01:39:22.102Z&quot;, &quot;motivo&quot;: &quot;Conte&#xfa;do ofensivo&quot;}

Number of calls: 0
    at Object.&lt;anonymous&gt; (C:\Users\Merli\Desktop\MDS\2024-2-GEROcuidado-APIForum\src\publicacao\denuncia.service.spec.ts:204:32)]]></failure>
</testCase>
<testCase name="DenunciaService update deve lan&#xe7;ar uma exce&#xe7;&#xe3;o se a den&#xfa;ncia n&#xe3;o for encontrada" duration="9" />
<testCase name="DenunciaService remove deve remover uma den&#xfa;ncia com sucesso" duration="10" />
<testCase name="DenunciaService remove deve lan&#xe7;ar uma exce&#xe7;&#xe3;o se a den&#xfa;ncia n&#xe3;o for encontrada" duration="7" />
</file>
<file path="src\publicacao\publicacao.service.spec.ts">
<testCase name="PublicacaoService should be defined" duration="7" />
<testCase name="PublicacaoService should create Publicacao" duration="6" />
<testCase name="PublicacaoService should find Publicacao" duration="24" />
<testCase name="PublicacaoService should remove Publicacao" duration="5" />
<testCase name="PublicacaoService should update Publicacao" duration="5" />
<testCase name="PublicacaoService findAll should findAll Publicacao" duration="6" />
<testCase name="PublicacaoService findAll should findAll Publicacao with isReported" duration="11" />
<testCase name="PublicacaoService findAll should findAll Publicacao with title unaccent" duration="5" />
</file>
<file path="src\publicacao\comentario.service.spec.ts">
<testCase name="ComentariosService deve estar definido" duration="6" />
<testCase name="ComentariosService create deve criar um coment&#xe1;rio com sucesso" duration="5" />
<testCase name="ComentariosService findAll deve retornar uma lista paginada de coment&#xe1;rios" duration="5" />
<testCase name="ComentariosService findOne deve retornar um coment&#xe1;rio com informa&#xe7;&#xf5;es do usu&#xe1;rio" duration="7" />
<testCase name="ComentariosService findOne deve lan&#xe7;ar uma exce&#xe7;&#xe3;o NotFoundException se o coment&#xe1;rio n&#xe3;o for encontrado" duration="11" />
<testCase name="ComentariosService update deve atualizar um coment&#xe1;rio com sucesso" duration="6" />
<testCase name="ComentariosService remove deve remover um coment&#xe1;rio com sucesso" duration="3" />
</file>
<file path="src\publicacao\comentario.controller.spec.ts">
<testCase name="ComentariosController deve estar definido" duration="7" />
<testCase name="ComentariosController create deve criar um coment&#xe1;rio com sucesso" duration="4" />
<testCase name="ComentariosController create deve lan&#xe7;ar uma BadRequestException em caso de erro no servi&#xe7;o" duration="14" />
<testCase name="ComentariosController findAll deve retornar uma lista paginada de coment&#xe1;rios" duration="7" />
<testCase name="ComentariosController findAll deve lan&#xe7;ar uma exce&#xe7;&#xe3;o em caso de erro no servi&#xe7;o" duration="7" />
<testCase name="ComentariosController findOne deve retornar um coment&#xe1;rio pelo ID" duration="6" />
<testCase name="ComentariosController findOne deve lan&#xe7;ar uma exce&#xe7;&#xe3;o em caso de erro no servi&#xe7;o" duration="12" />
<testCase name="ComentariosController update deve atualizar um coment&#xe1;rio com sucesso" duration="4" />
<testCase name="ComentariosController update deve lan&#xe7;ar uma exce&#xe7;&#xe3;o em caso de erro no servi&#xe7;o" duration="3" />
<testCase name="ComentariosController remove deve remover um coment&#xe1;rio com sucesso" duration="22" />
<testCase name="ComentariosController remove deve lan&#xe7;ar uma exce&#xe7;&#xe3;o em caso de erro no servi&#xe7;o" duration="8" />
</file>
<file path="src\publicacao\denuncia.controller.spec.ts">
<testCase name="DenunciaController deve estar definido" duration="6" />
<testCase name="DenunciaController create deve criar uma den&#xfa;ncia com sucesso" duration="3" />
<testCase name="DenunciaController create deve lan&#xe7;ar BadRequestException em caso de erro" duration="10" />
<testCase name="DenunciaController findAll deve retornar uma lista paginada de den&#xfa;ncias" duration="5" />
<testCase name="DenunciaController findOne deve retornar uma den&#xfa;ncia pelo ID" duration="5" />
<testCase name="DenunciaController findOne deve lan&#xe7;ar BadRequestException em caso de erro" duration="5" />
<testCase name="DenunciaController update deve atualizar uma den&#xfa;ncia com sucesso" duration="2" />
<testCase name="DenunciaController update deve lan&#xe7;ar BadRequestException em caso de erro" duration="3" />
<testCase name="DenunciaController remove deve remover uma den&#xfa;ncia com sucesso" duration="2" />
<testCase name="DenunciaController remove deve lan&#xe7;ar BadRequestException em caso de erro" duration="3" />
</file>
<file path="src\publicacao\publicacao.controller.spec.ts">
<testCase name="PublicacaoController should be defined" duration="7" />
<testCase name="PublicacaoController should create Publicacao" duration="7" />
<testCase name="PublicacaoController should find Publicacao" duration="3" />
<testCase name="PublicacaoController should remove Publicacao" duration="3" />
<testCase name="PublicacaoController should update Publicacao" duration="2" />
<testCase name="PublicacaoController findAll should findAll Publicacao" duration="3" />
</file>
<file path="src\shared\helpers\sql-query-helper.spec.ts">
<testCase name="Where Clause EQUAL should return empty string if value is undefined" duration="1" />
<testCase name="Where Clause EQUAL should return where string based on given value and tableColumn" duration="1" />
<testCase name="Where Clause STRING should return empty string if value is undefined" duration="0" />
<testCase name="Where Clause STRING should return empty string if value has no length" duration="0" />
<testCase name="Where Clause STRING should return where string based on given value and tableColumn" duration="0" />
<testCase name="Where Clause NUMBER should return empty string if value is undefined" duration="1" />
<testCase name="Where Clause NUMBER should return where string based on given value and tableColumn" duration="2" />
<testCase name="Where Clause BOOLEAN should return empty string if value is undefined" duration="0" />
<testCase name="Where Clause BOOLEAN should return empty string if value is higher than 1" duration="0" />
<testCase name="Where Clause BOOLEAN should return where string based on given value and tableColumn" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return empty string if value is undefined" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return where string if value is number" duration="0" />
<testCase name="Where Clause ARRAY NUMBER should return where string if value is number array" duration="0" />
</file>
<file path="src\config\db\db.service.spec.ts">
<testCase name="DbService should be defined" duration="5" />
<testCase name="DbService should return db config development" duration="3" />
<testCase name="DbService should return db config production" duration="3" />
</file>
<file path="src\autenticacao.guard.spec.ts">
<testCase name="AutenticacaoGuard should be defined" duration="5" />
<testCase name="AutenticacaoGuard should pass if route is public" duration="3" />
<testCase name="AutenticacaoGuard should pass if authentication is successful" duration="5" />
<testCase name="AutenticacaoGuard should not pass if authentication is unsuccessful" duration="4" />
</file>
<file path="src\shared\decorators\paginate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="1" />
<testCase name="Pagination should be Paginate not limit" duration="1" />
<testCase name="Pagination should be Paginate not offset" duration="1" />
</file>
<file path="src\shared\interceptors\data-transform.interceptor.spec.ts">
<testCase name="DataTransformInterceptor should be defined" duration="2" />
<testCase name="DataTransformInterceptor should be intercept t1" duration="4" />
<testCase name="DataTransformInterceptor should be intercept should formatData with message" duration="6" />
<testCase name="DataTransformInterceptor should be intercept should formatData with no message" duration="2" />
<testCase name="DataTransformInterceptor should be intercept should formatData with Paginate" duration="1" />
</file>
<file path="src\shared\helpers\buffer-to-image.spec.ts">
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a image" duration="2" />
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a empty if null" duration="1" />
<testCase name="Buffer to image bufferToBase64 should be bufferToBase64 a empty if not image" duration="1" />
<testCase name="Buffer to image isBase64 should be false" duration="1" />
<testCase name="Buffer to image isBase64 should be true" duration="5" />
<testCase name="Buffer to image isBase64Image should be false" duration="0" />
<testCase name="Buffer to image isBase64Image should be true" duration="0" />
</file>
<file path="src\shared\filters\all-exceptions.filter.spec.ts">
<testCase name="AllExceptionsFilter should be defined" duration="1" />
<testCase name="AllExceptionsFilter should be catch" duration="1" />
<testCase name="AllExceptionsFilter should be not exception to class-validator" duration="1" />
<testCase name="AllExceptionsFilter should be not exception only message" duration="1" />
</file>
<file path="src\data-source.spec.ts">
<testCase name="AppDataSource deve estar configurado corretamente" duration="1" />
<testCase name="AppDataSource deve inicializar sem erros" duration="1" />
<testCase name="AppDataSource deve lan&#xe7;ar um erro se a inicializa&#xe7;&#xe3;o falhar" duration="4" />
</file>
<file path="src\shared\classes\http-response.spec.ts">
<testCase name="HttpResponse should be defined" duration="1" />
<testCase name="HttpResponse should create message with payload text" duration="0" />
<testCase name="HttpResponse should create message with success text" duration="1" />
<testCase name="HttpResponse should create message with updated text" duration="1" />
<testCase name="HttpResponse should create message with deleted text" duration="1" />
</file>
<file path="src\shared\decorators\ordenate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="1" />
<testCase name="Pagination should be Paginate not limit" duration="1" />
<testCase name="Pagination should be Paginate not offset" duration="1" />
<testCase name="Ordenate should return default object if there is no JSON" duration="1" />
<testCase name="Ordenate should return OrderParams object with values for order" duration="1" />
<testCase name="Ordenate should return default values when obj has empty props" duration="1" />
<testCase name="Ordenate should be Ordenate using factory" duration="1" />
</file>
<file path="src\shared\decorators\filtrate.decorator.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="2" />
<testCase name="Pagination should be Paginate not limit" duration="0" />
<testCase name="Pagination should be Paginate not offset" duration="0" />
<testCase name="Filtrate should return empty object for filter" duration="1" />
<testCase name="Filtrate should return TestFilterProps object with values for filter" duration="1" />
<testCase name="Filtrate should be Filtrate using factory" duration="1" />
</file>
<file path="src\shared\helpers\commons.spec.ts">
<testCase name="Helper deve criar um hash com tamanho default" duration="4" />
<testCase name="Helper should be return if its nill for undefined" duration="0" />
<testCase name="Helper should be return if its nill for null" duration="0" />
<testCase name="Helper should be isJsonObject to be true" duration="0" />
<testCase name="Helper should be isJsonObject to be false" duration="0" />
<testCase name="Helper should be isJsonObject to be false in not parse" duration="0" />
</file>
<file path="src\shared\decorators\filtrate-string.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
<testCase name="Pagination should be Paginate" duration="1" />
<testCase name="Pagination should be Paginate not limit" duration="1" />
<testCase name="Pagination should be Paginate not offset" duration="1" />
<testCase name="FiltrateString should return empty object for filter" duration="1" />
<testCase name="FiltrateString should return TestFilterProps object with values for filter" duration="1" />
<testCase name="FiltrateString should be FiltrateString using factory" duration="4" />
</file>
<file path="src\shared\filters\model-not-found.exception-filter.spec.ts">
<testCase name="ModelNotFoundExceptionFilter should be defined" duration="1" />
<testCase name="ModelNotFoundExceptionFilter should be catch" duration="1" />
</file>
<file path="src\shared\helpers\string-helpers.spec.ts">
<testCase name="String Helpers should be regex" duration="3" />
</file>
<file path="src\shared\decorators\public-route.spec.ts">
<testCase name="Pagination should be defined" duration="1" />
</file>
<file path="src\shared\validators\id.validator.spec.ts">
<testCase name="HttpResponse should be defined" duration="1" />
</file>
</testExecutions>